---
import Logo from "../components/Logo.astro";
---

<header
	id="landing-header"
	class="py-2.5 px-12 flex items-center fixed top-0 w-full justify-between z-40 text-white"
>
	<div class="flex flex-grow basis-0">
		<Logo />
	</div>

	<nav>
		<ul
			class="flex text-sm [&>li>a]:transition-colors [&>li>a]:duration-300 [&>li>a]:text-current [&>li>a]:text-white [&>li>a]:font-medium [&>li>a]:inline-block [&>li>a]:px-4 [&>li>a]:py-2"
		>
			<li><a href="#model-s">Model S</a></li>
			<li><a href="#model-3">Model 3</a></li>
			<li><a href="#model-x">Model X</a></li>
			<li><a href="#model-y">Model Y</a></li>
			<li><a href="#">Powerwall</a></li>
			<li><a href="#">Carga</a></li>
		</ul>
	</nav>

	<nav class="flex flex-grow justify-end basis-0">
		<ul
			class="flex text-sm [&>li>a]:transition-colors [&>li>a]:duration-300 [&>li>a]:text-current [&>li>a]:text-white [&>li>a]:font-medium [&>li>a]:inline-block [&>li>a]:px-4 [&>li>a]:py-2"
		>
			<li><a href="#">Soporte</a></li>
			<li><a href="#">Tienda</a></li>
			<li><a href="#">Cuenta</a></li>
			<li><a href="#">Men√∫</a></li>
		</ul>
	</nav>

	<div
		id="menu-backdrop"
		class={`
			absolute bg-black/5 backdrop-blur-lg rounded 
			translate-x-[var(--left)] translate-y-[var(--top)] 
			top-0 left-0
			w-[var(--width)] h-[var(--height)]
			transition-all duration-300
			ease-in-out opacity-0 -z-10
		`}
	>
	</div>
</header>

<script>
	const listItem = document.querySelectorAll("#landing-header li");
	const menuBackDrop = document.querySelector("#menu-backdrop") as HTMLElement;

	listItem.forEach((item) => {
		item.addEventListener("mouseenter", () => {
			const { left, top, width, height } = item.getBoundingClientRect();
			const { clientHeight, clientWidth } = item;

			menuBackDrop.style.setProperty("--left", `${left}px`);
			menuBackDrop.style.setProperty("--top", `${top}px`);
			menuBackDrop.style.setProperty("--width", `${width}px`);
			menuBackDrop.style.setProperty("--height", `${height}px`);
			menuBackDrop.style.opacity = "1";
			menuBackDrop.style.visibility = "visible";
		});

	});
</script>

<script>
	const header = document.querySelector("#landing-header") as HTMLElement;
	const observerOptions = {
		root: null,
		rootMargin: "0px",
		threshold: 0.7,
	};

	const observer = new IntersectionObserver((entries) => {
		entries.forEach((entry) => {
			const { isIntersecting } = entry;
			if (isIntersecting) {
				const color = entry.target.getAttribute("data-header-color");
				header.style.color = color;
			}
		});
	}, observerOptions);

	const sections = document.querySelectorAll(".landing-section");
	sections.forEach((section) => observer.observe(section));
</script>
